package example_feat

import (
    "{{ .ProjectName }}/internals/factory"
    "{{ .ProjectName }}/internals/utils/response"

    "github.com/labstack/echo/v4"
)

type IUserRepo interface{
    Get(ctx echo.Context) (out []*UserModel, err error)
    Create(ctx echo.Context, in *UserModel) (out *UserModel, err error)
}

type userService struct {
    userRepo IUserRepo
}

func NewService(f *factory.Factory) *userService{
    return &userService{
        userRepo: NewRepo(f.Db),
    }
}

func (s *userService) Get(ctx echo.Context) (out []*UserResponse, err error){
    out = []*UserResponse{}
    users, err := s.userRepo.Get(ctx)
    if err != nil {
        err = response.ErrorWrap(response.ErrInternalServerError, err)
        return
    }

    for _, val:= range users {
        user := &UserResponse{}
        user.MapFromUserModel(val)
        out = append(out, user)
    }
    return
}

func (s *userService) Create(ctx echo.Context, in *UserCreateRequest) (err error){
    user:= &UserModel{}
    user.Name = in.Name
    user.Email = in.Email
    user.Password = in.Password
    _, err = s.userRepo.Create(ctx, user)
    if err != nil {
        err = response.ErrorWrap(response.ErrInternalServerError, err)
        return
    }
    return nil
}